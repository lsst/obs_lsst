description: DRP specialized for LSSTImSim
instrument: lsst.obs.lsst.LsstCamImSim
imports:
  # Inherits directly from pipe_tasks to avoid redefining sourceTable subset
  - location: $PIPE_TASKS_DIR/pipelines/DRP.yaml
  - $FARO_DIR/pipelines/metrics_pipeline.yaml
tasks:
    isr:
        class: lsst.ip.isr.IsrTask
        config:
            connections.newBFKernel: bfk
            doDefect: False
            doBrighterFatter: True
    calibrate:
        class: lsst.pipe.tasks.calibrate.CalibrateTask
        config:
            connections.astromRefCat: 'cal_ref_cat_2_2'
            connections.photoRefCat: 'cal_ref_cat_2_2'
            astromRefObjLoader.ref_dataset_name: 'cal_ref_cat_2_2'
            photoRefObjLoader.ref_dataset_name: 'cal_ref_cat_2_2'
            python: >
                config.astromRefObjLoader.filterMap = {band: 'lsst_%s_smeared' % (band) for band in 'ugrizy'};
                config.photoRefObjLoader.filterMap = {band: 'lsst_%s_smeared' % (band) for band in 'ugrizy'};
    measure:
        class: lsst.pipe.tasks.multiBand.MeasureMergedCoaddSourcesTask
        config:
            connections.refCat: 'cal_ref_cat_2_2'
            match.refObjLoader.ref_dataset_name: 'cal_ref_cat_2_2'
            python: >
                config.match.refObjLoader.filterMap = {band: 'lsst_%s_smeared' % (band) for band in 'ugrizy'};
    matchObjectToTruth:
        class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
        config:
            python: |
                # Target settings are likely common to all object tables
                from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
                config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
                config.match_tract_catalog.columns_ref_flux = [
                    'flux_u', 'flux_g', 'flux_r',
                    'flux_i', 'flux_z', 'flux_y',
                ]
                config.match_tract_catalog.columns_ref_meas = [
                    'ra', 'dec',
                    'flux_u', 'flux_g', 'flux_r',
                    'flux_i', 'flux_z', 'flux_y',
                ]
                config.match_tract_catalog.columns_target_meas = [
                    'x', 'y',
                    'u_cModelFlux', 'g_cModelFlux', 'r_cModelFlux',
                    'i_cModelFlux', 'z_cModelFlux', 'y_cModelFlux',
                ]
                config.match_tract_catalog.columns_target_err = [
                    'xErr', 'yErr',
                    'u_cModelFluxErr', 'g_cModelFluxErr', 'r_cModelFluxErr',
                    'i_cModelFluxErr', 'z_cModelFluxErr', 'y_cModelFluxErr',
                ]
                config.match_tract_catalog.coords_ref_to_convert = {'ra': 'x', 'dec': 'y'}
                # Might need adjusting for different survey depths
                config.match_tract_catalog.mag_faintest_ref = 27.0;
subsets:
    step1:
        subset:
        - isr
        - characterizeImage
        - calibrate
        - writeSourceTable
        - transformSourceTable
        description: >
            Per-detector tasks that can be run together to start the DRP pipeline.

            These may or may not be run with 'tract' or 'patch' as part of the data ID
            expression. This specific pipeline contains no tasks that require full
            visits. Running with 'tract' (and 'patch') constraints will select
            partial visits that overlap that region.

            In data release processing, operators should stop to address unexpected
            failures before continuing on to step2.
    step2:
        subset:
        - consolidateSourceTable
        - consolidateVisitSummary
        - nsrcMeasVisit
        - TE3
        - TE4
        description: >
            Per-visit tasks that can be run together, but only after the 'step1'.

            These may or may not be run with 'tract' or 'patch' as part of the data ID
            expression.  Running with 'tract' (and 'patch') constraints will select
            partial visits that overlap that region.
            This specific pipeline contains no tasks that require full visits.

            This subset is considered a workaround for missing middleware and task
            functionality.  It may be removed in the future.
    step3:
        subset:
        - makeWarp
        - assembleCoadd
        - detection
        - mergeDetections
        - deblend
        - measure
        - mergeMeasurements
        - forcedPhotCoadd
        - transformObjectTable
        - writeObjectTable
        - consolidateObjectTable
        - matchObjectToTruth
        - healSparsePropertyMaps
        - selectGoodSeeingVisits
        - templateGen
        - matchCatalogsTract
        - matchCatalogsPatch
        - matchCatalogsPatchMultiBand
        - PA1
        - PF1_design
        - AM1
        - AM2
        - AM3
        - AD1_design
        - AD2_design
        - AD3_design
        - AF1_design
        - AF2_design
        - AF3_design
        - AB1
        - modelPhotRepGal1
        - modelPhotRepGal2
        - modelPhotRepGal3
        - modelPhotRepGal4
        - modelPhotRepStar1
        - modelPhotRepStar2
        - modelPhotRepStar3
        - modelPhotRepStar4
        - psfPhotRepStar1
        - psfPhotRepStar2
        - psfPhotRepStar3
        - psfPhotRepStar4
        description: >
            Tasks that can be run together, but only after the 'step1' and 'step2'
            subsets.

            These should be run with explicit 'tract' constraints essentially all the
            time, because otherwise quanta will be created for jobs with only partial
            visit coverage.

            It is expected that many forcedPhotCcd quanta will "normally" fail when
            running this subset, but this isn't a problem right now because there
            are no tasks downstream of it.  If other tasks regularly fail or we add
            tasks downstream of forcedPhotCcd, these subsets or the tasks will need
            additional changes.

            This subset is considered a workaround for missing middleware and task
            functionality.  It may be removed in the future.
    step4:
        subset:
        - forcedPhotCcd
        - forcedPhotDiffim
        - getTemplate
        - imageDifference
        - transformDiaSourceCat
        - writeForcedSourceTable
        description: >
            Tasks that can be run together, but only after the 'step1', 'step2'
            and 'step3' subsets

            These detector-level tasks should not be run with
            'tract' or 'patch' as part of the data ID expression if all
            reference catalogs or diffIm templates that cover these
            detector-level quanta are desired.
    step5:
        subset:
        - drpAssociation
        - drpDiaCalculation
        - forcedPhotCcdOnDiaObjects
        - forcedPhotDiffOnDiaObjects
        - transformForcedSourceTable
        - consolidateForcedSourceTable
        - consolidateAssocDiaSourceTable
        - consolidateFullDiaObjectTable
        - writeForcedSourceOnDiaObjectTable
        - transformForcedSourceOnDiaObjectTable
        - consolidateForcedSourceOnDiaObjectTable
        - TE1
        - TE2
        - wPerp
        description: >
            Tasks that can be run together, but only after the 'step1', 'step2',
            'step3', and 'step4' subsets

            This step includes patch-level aggregation Tasks. These should be
            run with explicit 'tract' constraints in the data query, otherwise
            quanta will be created for jobs with only partial visit coverage.
            'consolidateForcedSourceTable' is a tract-level task that aggregates
            patches and should be rerun if any of the patches fail.
    step6:
        subset:
        - consolidateDiaSourceTable
        description: >
            Tasks that can be run together, but only after the 'step1', 'step2',
            'step3', and 'step4' subsets

            This step includes visit-level aggregation tasks. Running without
            tract or patch in the data query is recommended, otherwise the
            outputs of consolidateDiaSourceTable will not contain complete visits.

            This subset is separate from step4 to signal to operators to pause
            to assess unexpected image differencing failures before these
            aggregation steps. Otherwise, if run in the same quantum graph,
            aggregated data products (e.g. diaObjects) would not be created if
            one or more of the expected inputs is missing.
    step7:
        subset:
        - makeCcdVisitTable
        - makeVisitTable
        - consolidateHealSparsePropertyMaps
        description: >
            Tasks that should be run as the final step that require global
            inputs, and can be run after the 'step3' subset.

            This step has global aggregation tasks to run over all visits,
            detectors, tracts, etc.  This step should be run only with
            the instrument constraint in the data query.
